package KiemTra;

import java.util.*;

/*
@author made by Qu·ª≥nh H∆∞∆°ng with luv üíñ
*/

public class KiemTra {
    static transient Scanner sc = new Scanner(System.in);

    public static String kiemTraNhapChuoi() {
        String dauVao;
        while(true) {
            dauVao = sc.nextLine();
            dauVao = dauVao.trim();   //X√≥a kho·∫£ng tr·∫Øng ƒë·∫ßu chu·ªói v√† cu·ªëi chu·ªói
            if (dauVao != null) {
                return dauVao;
            }
            else{
                System.out.println("Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng chu·ªói! M·ªùi nh·∫≠p l·∫°i chu·ªói: ");
            }
        }
    }

    //Start: ID CHECK
    public static String kiemTraNhapMaKH() {
        String dauVao;
        while(true) {
            dauVao = sc.nextLine();
            dauVao = dauVao.trim().toUpperCase();
            if(!dauVao.isEmpty() && dauVao.matches("KH" + "[0-9]{3}")) {
                return dauVao;
            }
            else {
                System.out.println("Nh·∫≠p sai ƒë·ªãnh d·∫°ng m√£ kh√°ch h√†ng: KH___. V√≠ d·ª•: KH001");
            }
            System.out.print("M·ªùi nh·∫≠p l·∫°i: ");
        }
    }

    public static String kiemTraNhapMaNhaCC() { 
        String dauVao;
        while(true) {
            dauVao = sc.nextLine();
            dauVao = dauVao.trim().toUpperCase();
            if(!dauVao.isEmpty() && dauVao.matches("NCC" + "[0-9]{3}")) {
                return dauVao;
            }
            else {
                System.out.println("Nh·∫≠p sai ƒë·ªãnh d·∫°ng m√£ nh√† cung c·∫•p: NCC___. V√≠ d·ª•: NCC001");
            }
            System.out.print("M·ªùi nh·∫≠p l·∫°i: ");
        }
    }

    public static String kiemTraNhapMaNV() {
        String dauVao;
        while(true) {
            dauVao = sc.nextLine();
            dauVao = dauVao.trim().toUpperCase();
            if(!dauVao.isEmpty() && dauVao.matches("NV" + "[0-9]{3}")) {
                return dauVao;  
            }
            else {
                System.out.println("Nh·∫≠p sai ƒë·ªãnh d·∫°ng m√£ nh√¢n vi√™n: NV___. V√≠ d·ª•: NV001");
            }
            System.out.print("M·ªùi nh·∫≠p l·∫°i: ");
        }
    }

    public static String kiemTraNhapMaSP() {
        String dauVao;
        while(true) {
            dauVao = sc.nextLine();
            dauVao = dauVao.trim().toUpperCase();
            if(!dauVao.isEmpty() && dauVao.matches("(SP)" + "[0-9]{3}")) {
                return dauVao;
            }
            else {
                System.out.println("Nh·∫≠p sai ƒë·ªãnh d·∫°ng m√£ s·∫£n ph·∫©m: SP___. V√≠ d·ª•: SP001");
            }
            System.out.print("M·ªùi nh·∫≠p l·∫°i: ");
        }
    }

    public static String kiemTraNhapMaDH() {
        String dauVao;
        while(true) {
            dauVao = sc.nextLine();
            dauVao = dauVao.trim().toUpperCase();
            if(!dauVao.isEmpty() && dauVao.matches("DH" + "[0-9]{3}")) {
                                                            //  "\d{0,3}
                return dauVao;
            }
            else {
                System.out.println("Nh·∫≠p sai ƒë·ªãnh d·∫°ng m√£ ƒë∆°n h√†ng: DH___. V√≠ d·ª•: DH001");
            }
            System.out.print("M·ªùi nh·∫≠p l·∫°i: ");
        }
    }

    public static String kiemTraNhapMaCTDH() {
        String dauVao;
        while(true) {
            dauVao = sc.nextLine();
            dauVao = dauVao.trim().toUpperCase();
            if(!dauVao.isEmpty() && dauVao.matches("DH" + "[0-9]{3}" + "_" + "[0-9]{1,3}")) {
                                                            //V√ç D·ª§: DH001_1
                return dauVao;
            }
            else {
                System.out.println("Nh·∫≠p sai ƒë·ªãnh d·∫°ng m√£ chi ti·∫øt ƒë∆°n h√†ng. V√≠ d·ª•: DH001_1");
            }
            System.out.print("M·ªùi nh·∫≠p l·∫°i: ");
        }
    }

    public static String kiemTraNhapMaKM() {
        String dauVao;
        while(true) {
            dauVao = sc.nextLine();
            dauVao = dauVao.trim().toUpperCase();
            if(!dauVao.isEmpty() && dauVao.matches("KM" + "[0-9]{3}")) {
                return dauVao;
            }
            else {
                System.out.println("Nh·∫≠p sai ƒë·ªãnh d·∫°ng m√£ khuy·∫øn m√£i: KM___. V√≠ d·ª•: KM001");
            }
            System.out.print("M·ªùi nh·∫≠p l·∫°i: ");
        }
    }

    public static String kiemTraNhapMaPN() {
        String dauVao;
        while(true) {
            dauVao = sc.nextLine();
            dauVao = dauVao.trim().toUpperCase();
            if(!dauVao.isEmpty() && dauVao.matches("PN" + "[0-9]{3}")) {
                return dauVao;
            }
            else {
                System.out.println("Nh·∫≠p sai ƒë·ªãnh d·∫°ng m√£ phi·∫øu nh·∫≠p: PN___. V√≠ d·ª•: PN001");
            }
            System.out.print("M·ªùi nh·∫≠p l·∫°i: ");
        }
    }

    public static String kiemTraNhapMaNL() {
        String dauVao;
        while(true) {
            dauVao = sc.nextLine();
            dauVao = dauVao.trim().toUpperCase();
            if(!dauVao.isEmpty() && dauVao.matches("NL" + "[0-9]{3}")) {
                return dauVao;
            }
            else {
                System.out.println("Nh·∫≠p sai ƒë·ªãnh d·∫°ng m√£ nguy√™n li·ªáu: NL___. V√≠ d·ª•: NL001");
            }
            System.out.print("M·ªùi nh·∫≠p l·∫°i: ");
        }
    }
    //End: ID CHECK

    public static String kiemTraNhapTen() {
        String dauVao;
        while(true) {
            dauVao = sc.nextLine();
            if(!dauVao.isEmpty() && dauVao.matches("[\\pL\\pMn*\\s*]+")) {
                //x√≥a k√Ω t·ª± kho·∫£ng tr·∫Øng ƒë·∫ßu v√† cu·ªëi chu·ªói
                dauVao = dauVao.trim();
                //x√≥a c√°c kho·∫£ng tr·∫Øng d∆∞ trong chu·ªói
                dauVao = dauVao.replaceAll("\\s+", " ");
                //vi·∫øt hoa m·ªói ch·ªØ c√°i ƒë·∫ßu c·ªßa m·ªói t·ª´
                dauVao = dauVao.toLowerCase();
                String[] chuoi = dauVao.split(" ");
                dauVao = "";
                for (int i = 0 ; i < chuoi.length ; i++) {
                    dauVao += String.valueOf(chuoi[i].charAt(0)).toUpperCase() + chuoi[i].substring(1);
                    //th√™m kho·∫£ng tr·∫Øng v√†o sau m·ªói t·ª´ (tr·ª´ t·ª´ cu·ªëi)
                    if(i < chuoi.length - 1) {
                        dauVao += " ";
                    }
                }
                return dauVao;
            }
            else {
                System.out.print("T√™n kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p l·∫°i: ");
            }
        }
    }

    public static String kiemTraNhapSDT() {
        String dauVao;
        while(true) {
            dauVao = sc.nextLine();
            dauVao = dauVao.trim();
            // S·ªë ƒë·∫ßu l√† s·ªë 0, sau ƒë√≥ l√† 9 ƒë·∫øn 10 ch·ªØ s·ªë
            if(!dauVao.isEmpty() && dauVao.matches("0[0-9]{9,10}")) {
                return dauVao;
            }
            else {
                System.out.println("Sai ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i: 0__________. V√≠ d·ª•: 0906666666");
            }
            System.out.print("M·ªùi nh·∫≠p l·∫°i: ");
        }
    }

    // Start: NUMBER CHECK
    public static int kiemTraNhapSoNguyen() {
        int dauVao;
        while(true) {
            try {
                dauVao = Integer.parseInt(sc.nextLine());
                return dauVao;
            }
            catch(NumberFormatException exception) {
                System.out.print("Sai ki·ªÉu d·ªØ li·ªáu! Vui l√≤ng nh·∫≠p l·∫°i: ");
            }
        }
    }

    public static int kiemTraSoNguyenDuong() {
        int dauVao;
        while(true) {
            dauVao = kiemTraNhapSoNguyen();
            if(dauVao > 0) {
                return dauVao;
            }
            else {
                System.out.print("S·ªë nh·∫≠p v√†o ph·∫£i l·ªõn h∆°n 0! M·ªùi nh·∫≠p l·∫°i: ");
            }
        }
    }

    public static Double kiemTraNhapSoThuc() {
        double dauVao;
        while(true) {
            try {
                dauVao = Double.parseDouble(sc.nextLine());
                return dauVao;
            }
            catch (NumberFormatException exception) {
                System.out.print("Nh·∫≠p sai ki·ªÉu d·ªØ li·ªáu! M·ªùi nh·∫≠p l·∫°i: ");
            }
        }
    }

    public static Double kiemTraTienThuong() {
        double dauVao;
        while(true) {
            try {
                dauVao = Double.parseDouble(sc.nextLine());
                if(dauVao >= 0)
                    return dauVao;
                else
                    System.out.print("Ti·ªÅn th∆∞·ªüng kh√¥ng th·ªÉ nh·ªè h∆°n 0! M·ªùi nh·∫≠p l·∫°i: ");
            }
            catch (NumberFormatException exception) {
                System.out.print("Nh·∫≠p sai ki·ªÉu d·ªØ li·ªáu! M·ªùi nh·∫≠p l·∫°i: ");
            }
        }
    }
    // End: NUMBER CHECK

    // Start: CHOICE CHECK
    public static String tiepTuc() {
        String dauVao;
        String dinhDang = "[y|n]";
        while(true) {
            dauVao = sc.nextLine().trim();
            dauVao = dauVao.toLowerCase();
            if(!dauVao.isEmpty() && dauVao.matches(dinhDang)) {
                return dauVao;
            }
            else {
                System.out.print("L·ª±a ch·ªçn sai ƒë·ªãnh d·∫°ng! M·ªùi nh·∫≠p l·∫°i: ");
            }
        }
    }
    // End: CHOICE CHECK

    //Start: DATE CHECK
    public static String kiemTraNgayThangNam() {
        String dauVao;
        String dinhDang = "\\d{1,2}/\\d{1,2}/\\d{4}";
        while(true) {
            dauVao = sc.nextLine().trim();
            if(!dauVao.isEmpty() && dauVao.matches(dinhDang) && kiemTraNgayThangNamHopLe(dauVao)) {
                return dauVao;
            }
            else {
                System.out.println("Ng√†y th√°ng nƒÉm kh√¥ng h·ª£p l·ªá (dd/mm/yyyy)");
                System.out.print("M·ªùi nh·∫≠p l·∫°i: ");
            }
        }
    }

    //Ki·ªÉm tra nƒÉm nhu·∫≠n
    public static boolean kiemTraNamNhuan(int nam) {
        return ((nam % 4 == 0 && nam % 100 != 0) || (nam % 400 == 0));
    }

    //Ki·ªÉm tra ng√†y th√°ng h·ª£p l·ªá
    public static boolean kiemTraNgayThangNamHopLe(String dauVao) {
        String[] ngayThangNam = dauVao.split("/");
        int ngay = Integer.parseInt(ngayThangNam[0]);
        int thang = Integer.parseInt(ngayThangNam[1]);
        int nam = Integer.parseInt(ngayThangNam[2]);

        if(thang < 1 || thang > 12 || nam < 0) {
            return false;
        }

        //ki·ªÉm tra s·ªë ng√†y trong th√°ng 2
        if(thang == 2) {
            if(kiemTraNamNhuan(nam)) {
                return (ngay >= 1 && ngay <= 29);
            }
            else {
                return (ngay >= 1 && ngay <= 28);
            }
        }

        //ki·ªÉm tra s·ªë ng√†y c·ªßa th√°ng c√≥ 30 ng√†y
        if(thang == 4 || thang == 6 || thang == 9 || thang == 11) {
            return (ngay >= 1 && ngay <= 30);
        }

        //ki·ªÉm tra s·ªë ng√†y c·ªßa th√°ng c√≥ 31 ng√†y
        return (ngay >= 1 && ngay <= 31);
    }
    //End: DATE CHECK
}
